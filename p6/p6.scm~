#lang scheme
; p6.scm
; A prototype for program 6 in scheme
;
; Program 6
; CS-320-01-Fall-2021
; @date 12/08/21
; @author Arthur Vo
;
; To run this file, you would start scheme at edoras command line prompt:
; scheme --load p6.scm, where the file is in the current directory
; and then in scheme type the load command (from the '%' prompt):
;(load "p6.scm")
;
; Defined LISTS for use with testing your functions.

(define list0 (list 'j 'k 'l 'm 'n 'o 'j) )
(define list1 (list 'a 'b 'c 'd 'e 'f 'g) )
(define list2 (list 's 't 'u 'v 'w 'x 'y 'z) )
(define list3 (list 'j 'k 'l 'm 'l 'k 'j) )
(define list4 (list 'n 'o 'p 'q 'q 'p 'o 'n) )
(define list5 '((a b) c (d e d) c (a b)) )
(define list6 '((h i) (j k) l (m n)) ) 
(define list7 '(f (a b) c (d e d) (b a) f) )
(define list8 '())
(define atm0 10)
;
; Here is a typical function definition from Sebesta Ch. 15
(define (adder lis)
  (cond
    ((null? lis) 0)
	(else (+ (car lis) (adder (cdr lis))))))


; odds ;
; returns a list containing the odd indexed elements of the passed list
(define (odds lis)
  (cond
    ( (null? lis) '())
    ( (null? (cdr lis)) '())
    (else
        (append (list (car lis)) (odds (cddr lis))))))


; evens ;
; recursive helper function for evenrev, returns a list containing the even indexed elements of the passed list
(define (evens lis)
  (cond
    ( (null? lis) '())
    ( (null? (cdr lis)) '())
    (else
     (append (list (car (cdr lis))) (evens (cddr lis))))))

; revlist ;
; recursive helper function for evenrev, returns a reversed list
(define (revlist lis)
  (cond
    ( (null? lis) '())
    (else
     (append (revlist (cdr lis)) (list (car lis))))))

; evenrev ;
; returns a list containing the even indexed elements of the passed list reversed
(define (evenrev lis)
  (cond
    ( (not (list? lis)) (display "USAGE: (evenrev {list})") (newline))
    (else
     (revlist (evens lis)))))



; penultimate ;
; return the second last element of the list
(define (penultimate lis)
  (cond
    ( (not (list? lis)) (display "USAGE: (penultimate {list})") (newline))
    ( (or (null? lis) (null? (cdr lis))) '())
    ( (null? (cddr lis)) (car lis))
    (else
     (penultimate (cdr lis)))))


; (define (palindrome ...
; return #t if the list is palindrome

; change-head ;
; returns the list generated by replacing the first element of the first list with the first element of the second list
(define (change-head lis1 lis2)
  (cond
    ( (or (not (list? lis1))
          (or (not (list? lis2))
              (or (null? lis1)
                  (or (null? lis2)))))
      (display "USAGE: (change-head {list} {list})") (newline))
    (else
     (cons (car lis2) (cdr lis1)))))


; TESTING ;
;(adder '(1 2 3 4 5 6 7))
;(change-head '() '(b))
;(change-head '(a) '())
;(change-head '(a) 'b)
;(change-head '(1 2 3) '(3 2 1))
;(evens list1)
;(odds list1)
(revlist list1)
(evens list1)
(evenrev list1)
(evenrev (evenrev list1))
(evenrev 5)
(evenrev '((h v) (j k) l (m n)))
(penultimate list1)
(penultimate '(a b))
(penultimate '(a))
(penultimate '((h v) (j k) (m n)))
(penultimate (penultimate '((h v) (j k) (m n))))
